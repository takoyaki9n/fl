課題用の補助資料
================

ファイル構成
------------

重要：これらのファイルを一度でも見た場合は，
      レポートにその旨を明記すること．それにより減点することはない．

* Makefile 
* OCamlMakefile -- Makefileが利用
* examples/     -- 簡単な例をいくつか
* syntax.ml     -- 構文木を表す型と値を表す型の定義
* w5lerxer.mll  -- lexer定義
* w5parser.mly  -- parser定義
* w5.ml         -- main部分


ビルド手法
----------

このREADMEと同じディレクトリにて`make`をする．
すると，`w5`という実行可能形式が生成される．


使い方
------

引数なしで起動した場合と，引数付きで起動した場合の動作が異なる．

### 引数なしで起動した場合

対話モードで起動する．ユーザが「`式;;`」もしくは「`let 変数 = 式;;`」を
入力すると，その構文解析結果を出力する．抜けるには，`Ctrl+D`もしくは
`Ctrl+C`で．

動作例：

    $ rlwrap ./w5
    > 1 + 2;;
    CExp (EAdd (1,2))
    > let x = 3;;
    CLet (x,3)
    > let x = let y = 24 in y*y;;
    CLet (x,ELet (y,24,EMul (y,y)))
    > let x = let y = 24;;
    ParseError!
    > ^D
    CQuit

    $


### 引数付きで起動した場合

`./w5 FILENAME`で起動すると，「`FILENAME`」で指定されたファイルから，式
を読みこみ，構文解析結果を出力する．

     $cat examples/t1.ml 
     1 - 2 + 3
     $ ./w5 examples/t1.ml 
     EAdd (ESub (1,2),3)
     $ cat examples/t2.ml 
     1 + 2 * 3 
     $ ./w5 examples/t2.ml 
     EAdd (1,EMul (2,3))


注意事項
--------

* OCamlと異なり，`1 + let x = 1 in x`はparse errorとなる．

* %leftや%rightは使用していない．

* 演算子`&&`，`||`，`<=`，`>`，`>=`が追加されている．
  しかしながら，syntax.mlの構文は該当課題と比べ拡張されていない．
  これらの演算子はsyntax sugarとして実装されている．




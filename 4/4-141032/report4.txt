関数・論理型プログラミング演習第4回レポート
氏名:八尋渉
学籍番号:05-141032

問1
ソースコード: example以下
実行例:考察を参照
考察:
-コンパイル
$ ocamllex exampleLexer.mll
$ ocamlyacc exampleParser.mly
$ ocamlc -c syntax.ml
$ ocamlc -c exampleParser.mli
$ ocamlc -c exampleParser.ml
$ ocamlc -c exampleLexer.ml
$ ocamlc -c example.ml
$ ocamlc -o example syntax.cmo exampleParser.cmo exampleLexer.cmo example.cmo
$ ./example <<EOF
3 + 5
EOF
EAdd (3,5)
-いろいろ試してみる
examplePaeser.mlyに於いて、以下のようにarith_exprをexprに潰すとshift/reduce conflictが発生した。
  expr:
   | LET var EQ expr IN expr   { ELet($2,$4,$6) }
-  | arith_expr                { $1 } 
-;
-
-arith_expr:
-  | arith_expr PLUS factor_expr { EAdd($1,$3) }
+  | expr PLUS factor_expr { EAdd($1,$3) }
   | factor_expr                 { $1 }
 ;
これは、let x = 0 in x + 3のような式について、
ELet (x, 0, EAdd (x, 3))
EAdd (ELet (x, 0, x), 3)
の2通りの可能な解析結果が存在することを意味する。

問2,3,4
ソースコード: syntax.ml  w4.ml  w4interpreter.ml  w4lexer.mll  w4parser.mly
実行例:
$ ./w4
> let x = 9;;
val x : int = 9
> let y = 4 in x + y;;
- : int = 13
考察:
q2-4以下のsyntax.ml、w4.ml、w4lexer.mll、w4parser.mlyを流用した。
一応問2から4のすべての要件を満たすように実装した。

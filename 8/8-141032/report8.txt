関数・論理型プログラミング演習第8回レポート
氏名:八尋渉
学籍番号:05-141032

問1 各種ソート
ソースコード:Sorts.hs
実行例:
:load Sorts.hs
map (\f -> f [8, 12, 3, 9, 13, 11, 6, 2, 1, 0, 7, 14, 5, 4, 10]) [insSort, quickSort, selectionSort, mergeSort]
考察:
挿入ソート: 後ろから挿入しながらリストを作ったO(n^2)
クイックソート: とりあえず最初の要素をピボットとして分割しながら作った。
選択ソート: 内部関数selminを作って、リスト中の最小要素と、それを除いた残りのリストを返しながら作った。
マージソート:２つのリストをマージするmerge2、リストのリストを2つずつマージするmergen、リストのリストが1つに統合されるまでmergenを適用してゆくmsortを定義して、引数のリストを要素数1のリストに分割してからmsortを適用した。

問2 無限リスト
ソースコード:InfLists.hs
実行例:
:load InfLists.hs
map (\l -> take 15 l) [ones, nats, fibs, primes]
考察:
最初の3つは前回のocamlの処理系で使ったものを流用した。
最後のprimesは、エラトステネスの篩を使って、2以降の自然数のリストから先頭の要素を取り出しながら、その数で割り切れるものを除外してゆくという方法で生成した。

問3 自然数の組の無限リスト
ソースコード:InfLists.hs
実行例:
:load NatPairs.hs
take 15 natPairs
考察:
内部関数pairsを定義し、足してnになる2つの自然数のペアのリストを作り、これをすべての自然数に対して適用して、リストをつなげていった。

問4 memoize
ソースコード:Memoize.hs
実行例:
:load Memoize.hs
mfib 25
mfib2 25
考察:
正しい方のmemoizeは、関数を適用した時点で、クロージャの持つ環境に無限リストrsが含まれるので、rsが使いまわされるが、
間違っている方は、カリー化が1段深いせいで、関数を適用した時のクロージャの持つ環境に無限リストrsが含まれず、数字が適用されるたびにrsが環境に追加されるため、遅くなる。

発展1 Bird's repmin
ソースコード:Repmin.hs
実行例:
:load Repmin.hs
let t = Fork (Fork (Tip 2) (Tip 4)) (Tip 6) in run t
考察:
repminは、木の各ノードをmで置き換えて、その部分木の中での最小値とのペアを返す。
repminに渡される時点では、mは自身を(相互)再帰的に定義したthunkなので、t'のノードにはmはthunkとして埋め込まれる。
repminで返される最小値は木tにのみ依存するので、mは循環せずに評価できる。
参考:
http://www.cs.uu.nl/wiki/pub/IFIP21/AtlanticCity/ifip66-slides-JV.pdf
